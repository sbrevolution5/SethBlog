@model SethBlog.Models.Post
@using SethBlog.Services
@inject IFileService _fileService
@{
    ViewData["Title"] = @Html.DisplayFor(model => model.Title);
}
<article class="blog-post px-3 py-3 p-md-3">
    @if (User.IsInRole("Administrator"))
    {
        <a asp-action="Edit" asp-route-id="@Model.Id">Edit</a> <span>|</span>
    }
    <a asp-action="Index">Back to List</a>
    <div class="container">
        <header class="blog-post-header">
            <h2 class="title mb-2">@Model.Title</h2>
            <span class="date">@Model.Created.ToString("MMM dd, yyyy")</span> | @if (Model.ReadTime is not null)
            {
                <span class="time">@Model.ReadTime min to read</span>
            }
            | <span class="comment"><a href="#">@Model.Comments.Count comments</a></span>
            <img class="img-fluid mb-2" src="@_fileService.DecodeFile(Model.PostImage, Model.ContentType)" />
        </header>

        <div class="blog-post-body">
            @Html.Raw(Model.Content)
        </div>

    </div>
    <!--//container-->
</article>
<h2>Comments:</h2>
<p class="text-muted">@Model.Comments.Count Comments </p>
@* Give Logged in users the ability to add a new comment *@
@* If user isn't logged in, prompt them to login so they can comment, then redirect them back to this page *@
@if (!User.Identity.IsAuthenticated)
{
    <a class="btn btn-block" asp-area="Identity" asp-page="/Account/Login" asp-route-returnUrl="@Url.Action("Details", "Posts" , new { id=Model.Id })">Login to add a comment</a>
}
else
{
    //Allow user to create comment
    <h3>Leave a Comment:</h3>
    <form asp-action="Create" asp-controller="Comments" method="POST">
        <div class="form-group">
            <input type="hidden" class="form-control" name="PostId" id="PostId" value="@Model.Id">
            <textarea class="form-control" name="Body" id="" aria-describedby="helpId" rows="5"></textarea>
            <button type="submit" class="btn btn-primary btn-block btn-dark">Submit</button>
            <span asp-validation-for="PostState" class="text-danger"></span>@*ToDO fix validation*@
        </div>
    </form>
}
@* List Current comments *@
@foreach (var comment in Model.Comments.OrderByDescending(c => c.Created))
{
    <div class="card shadow p-1 m-4">
        <div class="card-body">
            <div class="row">

                <div class="col-2">
                    <img src="@_fileService.DecodeFile(comment.Author.ImageData, comment.Author.ContentType)" class="img-fluid comment-img p-1" alt="{comment.Author.FullName} Image">
                </div>
                <div class="col-10">
                    <div class="row">

                        <div class="col-7">

                            <h4 class="card-title">
                                @comment.Author.FullName
                            </h4>
                        </div>
                        <div class="col-5 text-right">

                            <span class="date">@comment.Created.ToString("MMM dd, yyyy")</span>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">

                            <p class="card-text">@comment.Body</p>
                        </div>
                    </div>
                </div>
            </div>


        </div>
    </div>
}